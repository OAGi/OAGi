package org.oagi.srt.persistence.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.chanchan.common.persistence.db.BfPersistenceException;
import org.chanchan.common.persistence.db.DBAgent;
import org.oagi.srt.common.QueryCondition;
import org.oagi.srt.common.SRTObject;
import org.oagi.srt.persistence.dao.SRTDAO;
import org.oagi.srt.persistence.dao.SRTDAOException;
import org.oagi.srt.persistence.dto.Code_ListVO;

/**
*
* @author Jaehun Lee
* @version 1.0
*
*/

public class Code_ListMysqlDAO extends SRTDAO {

	private final String _tableName = "code_list";
	
	private final String _FIND_ALL_Code_List_STATEMENT =
			"SELECT Code_List_ID, Code_List_GUID, Enumeration_Type_GUID, Name, List_ID, "
			+ "Agency_ID, Version_ID, Definition, Definition_Source, Based_Code_List_ID, Extensible_Indicator,  Created_By_User_ID, Last_Updated_By_User_ID, Creation_Timestamp, "
			+ "Last_Update_Timestamp FROM " + _tableName;
	
	private final String _FIND_Code_List_STATEMENT =
			"SELECT Code_List_ID, Code_List_GUID, Enumeration_Type_GUID, Name, List_ID, "
			+ "Agency_ID, Version_ID, Definition, Definition_Source, Based_Code_List_ID, Extensible_Indicator,  Created_By_User_ID, Last_Updated_By_User_ID, Creation_Timestamp, "
			+ "Last_Update_Timestamp FROM " + _tableName;
	
	private final String _INSERT_Code_List_STATEMENT = 
			"INSERT INTO " + _tableName + " (Code_List_GUID, Enumeration_Type_GUID, Name, List_ID,"
			+ " Agency_ID, Version_ID, Definition, Definition_Source, Based_Code_List_ID, Extensible_Indicator,  Created_By_User_ID, Last_Updated_By_User_ID, Creation_Timestamp,  "
			+ "Last_Update_Timestamp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?)";
	
	private final String _UPDATE_Code_List_STATEMENT = 
			"UPDATE " + _tableName
			+ " SET Last_Update_Timestamp = CURRENT_TIMESTAMP, Code_List_GUID = ?,"
			+ " Enumeration_Type_GUID = ?, Name = ?, List_ID = ?, Agency_ID = ?, Version_ID = ?, Definition = ?, Definition_Source = ?, Based_Code_List_ID = ?, Extensible_Indicator = ?, Created_By_User_ID = ?,"
			+ " Last_Updated_By_User_ID = ?, Creation_Timestamp = ? WHERE Code_List_ID = ?";
	
	private final String _DELETE_Code_List_STATEMENT = 
			"DELETE FROM " + _tableName + " WHERE Code_List_ID = ?";
	

	@Override
	public ArrayList<SRTObject> findObjects(QueryCondition qc)
			throws SRTDAOException {
		// TODO Auto-generated method stub
		return null;
	}
	
	public boolean insertObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Code_ListVO codelistVO = (Code_ListVO)obj;
		try {
			Connection conn = tx.open();
			PreparedStatement ps = null;
			ps = conn.prepareStatement(_INSERT_Code_List_STATEMENT);
			ps.setString(1, codelistVO.getCodeListGUID());
			ps.setString(2, codelistVO.getEnumerationTypeGUID());
			ps.setString(3, codelistVO.getName());
			ps.setString(4, codelistVO.getListID());
			ps.setInt(5, codelistVO.getAgencyID());
			ps.setString(6, codelistVO.getVersionID());
			ps.setString(7, codelistVO.getDefinition());
			ps.setString(8, codelistVO.getDefinitionSource());
			//ps.setInt(9, codelistVO.getBasedCodeListID());
			ps.setNull(9, codelistVO.getBasedCodeListID());
			ps.setBoolean(10, codelistVO.getExtensibleIndicator());
			ps.setInt(11, codelistVO.getCreatedByUserID());
			ps.setInt(12, codelistVO.getLastUpdatedByUserID());
			ps.setTimestamp(13, codelistVO.getLastUpdateTimestamp());

			ps.executeUpdate();

			//ResultSet tableKeys = ps.getGeneratedKeys();
			//tableKeys.next();
			//int autoGeneratedID = tableKeys.getInt(1);

			ps.close();
			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback();
			throw new SRTDAOException(SRTDAOException.DAO_INSERT_ERROR, e);
		} catch (SQLException e) {
			e.printStackTrace();
			tx.rollback();
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			tx.close();
		}
		return true;

	}

	public SRTObject findObject(QueryCondition qc) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		ResultSet rs = null;
		Code_ListVO codelistVO = new Code_ListVO();
		try {
			Connection conn = tx.open();
			String sql = _FIND_Code_List_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}
			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n+1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n+1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			if (rs.next()) {
				codelistVO.setCodeListID(rs.getInt("Code_List_ID"));
				codelistVO.setCodeListGUID(rs.getString("Code_List_GUID"));
				codelistVO.setEnumerationTypeGUID(rs.getString("Enumeration_Type_GUID"));
				codelistVO.setName(rs.getString("Name"));
				codelistVO.setListID(rs.getString("List_ID"));
				codelistVO.setAgencyID(rs.getInt("Agency_ID"));
				codelistVO.setVersionID(rs.getString("Version_ID"));
				codelistVO.setDefinition(rs.getString("Definition"));
				codelistVO.setDefinitionSource(rs.getString("Definition_Source"));
				codelistVO.setBasedCodeListID(rs.getInt("Based_Code_List_ID"));
				codelistVO.setExtensibleIndicator(rs.getBoolean("Extensible_Indicator"));
				codelistVO.setCreatedByUserID(rs.getInt("Created_By_User_ID"));
				codelistVO.setLastUpdatedByUserID(rs.getInt("Last_Updated_By_User_ID"));
				codelistVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				codelistVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));

			}
			tx.commit();
			conn.close();
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}
		return codelistVO;
	}

	public ArrayList<SRTObject> findObjects() throws SRTDAOException {
		ArrayList<SRTObject> list = new ArrayList<SRTObject>();

		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			Connection conn = tx.open();
			String sql = _FIND_ALL_Code_List_STATEMENT;
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				Code_ListVO codelistVO = new Code_ListVO();
				codelistVO.setCodeListID(rs.getInt("Code_List_ID"));
				codelistVO.setCodeListGUID(rs.getString("Code_List_GUID"));
				codelistVO.setEnumerationTypeGUID(rs.getString("Enumeration_Type_GUID"));
				codelistVO.setName(rs.getString("Name"));
				codelistVO.setListID(rs.getString("List_ID"));
				codelistVO.setAgencyID(rs.getInt("Agency_ID"));
				codelistVO.setVersionID(rs.getString("Version_ID"));
				codelistVO.setDefinition(rs.getString("Definition"));
				codelistVO.setDefinitionSource(rs.getString("Definition_Source"));
				codelistVO.setBasedCodeListID(rs.getInt("Based_Code_List_ID"));
				codelistVO.setExtensibleIndicator(rs.getBoolean("Extensible_Indicator"));
				codelistVO.setCreatedByUserID(rs.getInt("Created_By_User_ID"));
				codelistVO.setLastUpdatedByUserID(rs.getInt("Last_Updated_By_User_ID"));
				codelistVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				codelistVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
				list.add(codelistVO);
			}
			tx.commit();
			conn.close();
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}

		return list;
			
	}

	
	public boolean updateObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Code_ListVO codelistVO = (Code_ListVO)obj;
		PreparedStatement ps = null;
		try {
			Connection conn = tx.open();

			ps = conn.prepareStatement(_UPDATE_Code_List_STATEMENT);

			ps.setString(1, codelistVO.getCodeListGUID());
			ps.setString(2, codelistVO.getEnumerationTypeGUID());
			ps.setString(3, codelistVO.getName());
			ps.setString(4, codelistVO.getListID());
			ps.setInt(5, codelistVO.getAgencyID());
			ps.setString(6, codelistVO.getVersionID());
			ps.setString(7, codelistVO.getDefinition());
			ps.setString(8, codelistVO.getDefinitionSource());
			ps.setInt(9, codelistVO.getBasedCodeListID());
			ps.setBoolean(10, codelistVO.getExtensibleIndicator());
			ps.setInt(11, codelistVO.getCreatedByUserID());
			ps.setInt(12, codelistVO.getLastUpdatedByUserID());
			ps.setTimestamp(13, codelistVO.getCreationTimestamp());
			ps.setTimestamp(14, codelistVO.getLastUpdateTimestamp());
			
			ps.executeUpdate();

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.DAO_UPDATE_ERROR, e);
		} catch (SQLException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}

		return true;
	}

	
	public boolean deleteObject(SRTObject obj) throws SRTDAOException {
		Code_ListVO codelistVO = (Code_ListVO)obj;
		
		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		try {
			Connection conn = tx.open();

			ps = conn.prepareStatement(_DELETE_Code_List_STATEMENT);
			ps.setInt(1, codelistVO.getCodeListID());
			ps.executeUpdate();

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.DAO_DELETE_ERROR, e);
		} catch (SQLException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}

		return true;


	}
}
