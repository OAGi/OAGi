package org.oagi.srt.persistence.dao.oracle;

import org.chanchan.common.persistence.db.BfPersistenceException;
import org.chanchan.common.persistence.db.DBAgent;
import org.oagi.srt.common.QueryCondition;
import org.oagi.srt.common.SRTObject;
import org.oagi.srt.persistence.dao.SRTDAO;
import org.oagi.srt.persistence.dao.SRTDAOException;
import org.oagi.srt.persistence.dto.NamespaceVO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 *
 * @author Jaehun Lee
 * @version 1.0
 *
 */
public class NamespaceOracleDAO extends SRTDAO {

	private final String _tableName = "namespace";

	private final String _FIND_ALL_NAMESPACE_STATEMENT = 
			"SELECT namespace_id, uri, prefix, prescription, owner_user_id, "
					+ "created_by, last_updated_by, creation_timestamp, last_updated_timestamp"
					+ " FROM " + _tableName;

	private final String _FIND_NAMESPACE_STATEMENT = 
			"SELECT namespace_id, uri, prefix, prescription, owner_user_id, "
					+ "created_by, last_updated_by, creation_timestamp, last_updated_timestamp"
					+ " FROM " + _tableName;
	
	private final String _INSERT_NAMESPACE_STATEMENT = 
			"INSERT INTO " + _tableName + " (uri, prefix, prescription, owner_user_id, "
					+ "created_by, last_updated_by, creation_timestamp, last_updated_timestamp) "
					+ "VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)";

	private final String _UPDATE_NAMESPACE_STATEMENT = 
			"UPDATE " + _tableName
			+ " SET Last_Update_Timestamp = CURRENT_TIMESTAMP, uri = ?, prefix = ?, prescription = ?, owner_user_id = ?, "
			+ "created_by = ?, last_updated_by = ? WHERE namespace_id = ?";

	@Override
	public int findMaxId() throws SRTDAOException {
		// TODO Auto-generated method stub
		return 0;
	}
	
	private final String _DELETE_NAMESPACE_STATEMENT = 
			"DELETE FROM " + _tableName + " WHERE namespace_id = ?";

	public int insertObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Connection conn = null;
		PreparedStatement ps = null;

		NamespaceVO namespaceVO = (NamespaceVO) obj;
		try {
			conn = tx.open();
			ps = conn.prepareStatement(_INSERT_NAMESPACE_STATEMENT);
			if (namespaceVO.getUri() == null || namespaceVO.getUri().length() == 0 || namespaceVO.getUri().isEmpty() || namespaceVO.getUri().equals(""))
				ps.setString(1, "\u00A0");
			else
				ps.setString(1, namespaceVO.getUri());

//			if( namespaceVO.getPrefix()==null ||  namespaceVO.getPrefix().length()==0 ||  namespaceVO.getPrefix().isEmpty() ||  namespaceVO.getPrefix().equals(""))				
//				ps.setString(2,"\u00A0");
//			else 	
				ps.setString(2, namespaceVO.getPrefix());

//			if( namespaceVO.getPrescription()==null ||  namespaceVO.getPrescription().length()==0 ||  namespaceVO.getPrescription().isEmpty() ||  namespaceVO.getPrescription().equals(""))				
//				ps.setString(3,"\u00A0");
//			else 	
				ps.setString(3, namespaceVO.getPrescription());

			ps.setInt(4, namespaceVO.getOwneruserID());
			ps.setInt(5, namespaceVO.getCreatedByUserId());
			ps.setInt(6, namespaceVO.getLastUpdatedByUserId());
			ps.executeUpdate();

			//ResultSet tableKeys = ps.getGeneratedKeys();
			//tableKeys.next();
			//int autoGeneratedID = tableKeys.getInt(1);

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback();
			throw new SRTDAOException(SRTDAOException.DAO_INSERT_ERROR, e);
		} catch (SQLException e) {
			tx.rollback();
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(ps);
			closeQuietly(conn);
			closeQuietly(tx);
		}
		return 1;
	}

	public SRTObject findObject(QueryCondition qc) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		NamespaceVO namespaceVO = null;
		try {
			conn = tx.open();
			String sql = _FIND_NAMESPACE_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}

			int nCond2 = qc.getLikeSize();
			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					sql += WHERE_OR_AND + qc.getLikeField(n) + " like ?";
					WHERE_OR_AND = " AND ";
				}
			}

			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n + 1, ((Integer) value).intValue());
					}
				}
			}

			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					Object value = qc.getLikeValue(n);
					if (value instanceof String) {
						ps.setString(nCond + n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(nCond + n + 1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			if (rs.next()) {
				namespaceVO = new NamespaceVO();
				namespaceVO.setNamespaceID(rs.getInt("namespace_id"));
				namespaceVO.setUri(rs.getString("uri"));
				namespaceVO.setPrefix(rs.getString("prefix"));
				namespaceVO.setPrescription(rs.getString("prescription"));
				namespaceVO.setOwneruserID(rs.getInt("owner_user_id"));
				namespaceVO.setCreatedByUserId(rs.getInt("Created_By"));
				namespaceVO.setLastUpdatedByUserId(rs.getInt("Last_Updated_By"));
				namespaceVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				namespaceVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
			}
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(rs);
			closeQuietly(ps);
			closeQuietly(conn);
			closeQuietly(tx);
		}
		return namespaceVO;
	}

	public SRTObject findObject(QueryCondition qc, Connection conn) throws SRTDAOException {
		PreparedStatement ps = null;
		ResultSet rs = null;

		NamespaceVO namespaceVO = null;
		try {
			String sql = _FIND_NAMESPACE_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}

			int nCond2 = qc.getLikeSize();
			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					sql += WHERE_OR_AND + qc.getLikeField(n) + " like ?";
					WHERE_OR_AND = " AND ";
				}
			}

			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n + 1, ((Integer) value).intValue());
					}
				}
			}

			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					Object value = qc.getLikeValue(n);
					if (value instanceof String) {
						ps.setString(nCond + n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(nCond + n + 1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			if (rs.next()) {
				namespaceVO = new NamespaceVO();
				namespaceVO.setNamespaceID(rs.getInt("namespace_id"));
				namespaceVO.setUri(rs.getString("uri"));
				namespaceVO.setPrefix(rs.getString("prefix"));
				namespaceVO.setPrescription(rs.getString("prescription"));
				namespaceVO.setOwneruserID(rs.getInt("owner_user_id"));
				namespaceVO.setCreatedByUserId(rs.getInt("Created_By"));
				namespaceVO.setLastUpdatedByUserId(rs.getInt("Last_Updated_By"));
				namespaceVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				namespaceVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
			}

		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(rs);
			closeQuietly(ps);
		}
		return namespaceVO;
	}

	public ArrayList<SRTObject> findObjects(QueryCondition qc) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		ArrayList<SRTObject> list = new ArrayList<SRTObject>();
		try {
			conn = tx.open();
			String sql = _FIND_NAMESPACE_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}
			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n + 1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			while (rs.next()) {
				NamespaceVO namespaceVO = new NamespaceVO();
				namespaceVO.setNamespaceID(rs.getInt("namespace_id"));
				namespaceVO.setUri(rs.getString("uri"));
				namespaceVO.setPrefix(rs.getString("prefix"));
				namespaceVO.setPrescription(rs.getString("prescription"));
				namespaceVO.setOwneruserID(rs.getInt("owner_user_id"));
				namespaceVO.setCreatedByUserId(rs.getInt("Created_By"));
				namespaceVO.setLastUpdatedByUserId(rs.getInt("Last_Updated_By"));
				namespaceVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				namespaceVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
				list.add(namespaceVO);
			}
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(rs);
			closeQuietly(ps);
			closeQuietly(conn);
			closeQuietly(tx);
		}
		return list;
	}

	public ArrayList<SRTObject> findObjects() throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		ArrayList<SRTObject> list = new ArrayList<SRTObject>();
		try {
			conn = tx.open();
			String sql = _FIND_ALL_NAMESPACE_STATEMENT;
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				NamespaceVO namespaceVO = new NamespaceVO();
				namespaceVO.setNamespaceID(rs.getInt("namespace_id"));
				namespaceVO.setUri(rs.getString("uri"));
				namespaceVO.setPrefix(rs.getString("prefix"));
				namespaceVO.setPrescription(rs.getString("prescription"));
				namespaceVO.setOwneruserID(rs.getInt("owner_user_id"));
				namespaceVO.setCreatedByUserId(rs.getInt("Created_By"));
				namespaceVO.setLastUpdatedByUserId(rs.getInt("Last_Updated_By"));
				namespaceVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				namespaceVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
				list.add(namespaceVO);
			}
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(rs);
			closeQuietly(ps);
			closeQuietly(conn);
			closeQuietly(tx);
		}

		return list;
	}

	public boolean updateObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Connection conn = null;
		PreparedStatement ps = null;

		NamespaceVO namespaceVO = (NamespaceVO) obj;
		try {
			conn = tx.open();

			ps = conn.prepareStatement(_UPDATE_NAMESPACE_STATEMENT);

			if (namespaceVO.getUri() == null || namespaceVO.getUri().length() == 0 || namespaceVO.getUri().isEmpty() || namespaceVO.getUri().equals(""))
				ps.setString(1, "\u00A0");
			else
				ps.setString(1, namespaceVO.getUri());

//			if( namespaceVO.getPrefix()==null ||  namespaceVO.getPrefix().length()==0 ||  namespaceVO.getPrefix().isEmpty() ||  namespaceVO.getPrefix().equals(""))				
//				ps.setString(2,"\u00A0");
//			else 	
				ps.setString(2, namespaceVO.getPrefix());

//			if( namespaceVO.getPrescription()==null ||  namespaceVO.getPrescription().length()==0 ||  namespaceVO.getPrescription().isEmpty() ||  namespaceVO.getPrescription().equals(""))				
//				ps.setString(3,"\u00A0");
//			else 	
				ps.setString(3, namespaceVO.getPrescription());

			ps.setInt(4, namespaceVO.getOwneruserID());
			ps.setInt(5, namespaceVO.getCreatedByUserId());
			ps.setInt(6, namespaceVO.getLastUpdatedByUserId());
			//ps.setTimestamp(7, namespaceVO.getCreationTimestamp());
			ps.setInt(7, namespaceVO.getNamespaceID());
			ps.executeUpdate();

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.DAO_UPDATE_ERROR, e);
		} catch (SQLException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(ps);
			closeQuietly(conn);
			closeQuietly(tx);
		}

		return true;
	}

	public boolean deleteObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		Connection conn = null;
		PreparedStatement ps = null;

		NamespaceVO namespaceVO = (NamespaceVO) obj;
		try {
			conn = tx.open();

			ps = conn.prepareStatement(_DELETE_NAMESPACE_STATEMENT);
			ps.setInt(1, namespaceVO.getNamespaceID());
			ps.executeUpdate();

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.DAO_DELETE_ERROR, e);
		} catch (SQLException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(ps);
			closeQuietly(conn);
			closeQuietly(tx);
		}

		return true;

	}

	public ArrayList<SRTObject> findObjects(QueryCondition qc, Connection conn)
			throws SRTDAOException {
		PreparedStatement ps = null;
		ResultSet rs = null;

		ArrayList<SRTObject> list = new ArrayList<SRTObject>();
		try {
			String sql = _FIND_NAMESPACE_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}

			int nCond2 = qc.getLikeSize();
			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					sql += WHERE_OR_AND + qc.getLikeField(n) + " like ?";
					WHERE_OR_AND = " AND ";
				}
			}

			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n + 1, ((Integer) value).intValue());
					}
				}
			}

			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					Object value = qc.getLikeValue(n);
					if (value instanceof String) {
						ps.setString(nCond + n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(nCond + n + 1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			while (rs.next()) {
				NamespaceVO namespaceVO = new NamespaceVO();
				namespaceVO.setNamespaceID(rs.getInt("namespace_id"));
				namespaceVO.setUri(rs.getString("uri"));
				namespaceVO.setPrefix(rs.getString("prefix"));
				namespaceVO.setPrescription(rs.getString("prescription"));
				namespaceVO.setOwneruserID(rs.getInt("owner_user_id"));
				namespaceVO.setCreatedByUserId(rs.getInt("Created_By"));
				namespaceVO.setLastUpdatedByUserId(rs.getInt("Last_Updated_By"));
				namespaceVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				namespaceVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
				list.add(namespaceVO);
			}

		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(rs);
			closeQuietly(ps);
		}
		return list;
	}

	@Override
	public ArrayList<SRTObject> findObjects(Connection conn)
			throws SRTDAOException {
		PreparedStatement ps = null;
		ResultSet rs = null;

		ArrayList<SRTObject> list = new ArrayList<SRTObject>();

		try {
			String sql = _FIND_ALL_NAMESPACE_STATEMENT;
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				NamespaceVO namespaceVO = new NamespaceVO();
				namespaceVO.setNamespaceID(rs.getInt("namespace_id"));
				namespaceVO.setUri(rs.getString("uri"));
				namespaceVO.setPrefix(rs.getString("prefix"));
				namespaceVO.setPrescription(rs.getString("prescription"));
				namespaceVO.setOwneruserID(rs.getInt("owner_user_id"));
				namespaceVO.setCreatedByUserId(rs.getInt("Created_By"));
				namespaceVO.setLastUpdatedByUserId(rs.getInt("Last_Updated_By"));
				namespaceVO.setCreationTimestamp(rs.getTimestamp("Creation_Timestamp"));
				namespaceVO.setLastUpdateTimestamp(rs.getTimestamp("Last_Update_Timestamp"));
				list.add(namespaceVO);
			}
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			closeQuietly(rs);
			closeQuietly(ps);
		}
		return list;
	}

	@Override
	public int insertObject(SRTObject obj, Connection conn)
			throws SRTDAOException {
		// TODO Auto-generated method stub
		return 0;
	}
}
